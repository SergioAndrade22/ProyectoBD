package gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DatabaseMetaData; 
import java.sql.ResultSet; 
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;

import javax.swing.JButton; 
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class AdminWindow extends JFrame{
	private java.sql.Connection conn= null;
	private String[] table_name;
	JButton[] botones;
	
	/**
	 * Autogenerated serialVersionUID by JFrame hierarchy
	 */
	private static final long serialVersionUID = 3565124108220590676L;

	/**
	 * Create the application.
	 */
	public AdminWindow() {
		super();
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		this.setBounds(100, 100, 240, 100);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel passPanel = new JPanel();
		passPanel.setLayout(new FlowLayout());
		JPasswordField password = new JPasswordField(20);
		passPanel.add(password);
		password.setVisible(true);
		password.setEditable(true);
		password.setFocusable(true);
		JButton submit = new JButton("Submit");
		submit.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent evt) {
             tryConnect(String.valueOf(password.getPassword()));
          }
        });
		submit.setPreferredSize(new Dimension(80, 30));
		this.getRootPane().setDefaultButton(submit);
		passPanel.add(submit);
		this.add(passPanel);
		passPanel.setBounds(100, 100, 240, 100);
	}

	private void tryConnect(String passw) {
		String server = "localhost:3306";
		String dataBase = "vuelos";
		String user = "admin";
		String pass = passw;
		String url = "jdbc:mysql://" + server + "/" +dataBase+
		"?serverTimezone=America/Argentina/Buenos_Aires";
		try{
			conn = java.sql.DriverManager. getConnection(url, user, pass);
			this.setExtendedState(JFrame.MAXIMIZED_BOTH);
			this.setVisible(true);
			DatabaseMetaData md = conn.getMetaData();
			String[] types = {"TABLE"};
			ResultSet rs = md.getTables(null, null, "%", types);
			int i = 0;
			String[] aux = new String[20];
			while (rs.next()) {
				aux[i] = rs.getString("TABLE_NAME");
				i++;
			}
			table_name = new String[i];
			for(int j = 0; j < table_name.length; j++, i--) {
				table_name[j] = aux[i];
			}
			startFields();
		}
		catch (java.sql.SQLException ex){
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Connection Refused", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void startFields() {
		this.getContentPane().removeAll();
		this.setLayout(null);		
		this.add(mostrarBotonesClases());
		
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		JTextArea input = new JTextArea();
		JScrollPane scrollPane = new JScrollPane(input);
		scrollPane.setBounds(0, 0, d.width-250, 250);
		this.add(scrollPane);
		
		
		//Boton Execute
		JButton execute = new JButton("Execute Statement");
		execute.setBounds(d.width/2+100, d.height/2, 150, 80);
		execute.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					Statement stmt = conn.createStatement();
					String comando= input.getText();
					StringTokenizer tokenized = new StringTokenizer(comando);
					String comand = tokenized.nextToken();
					String specify = tokenized.nextToken();

					if((comand.equals("SELECT") || comand.equals("select"))) {
						ResultSet rs = stmt.executeQuery(comando);
						ResultSetMetaData rsmd = rs.getMetaData();
						int cantColumn = rsmd.getColumnCount();
						String[] column_name = new String[cantColumn];
						Class<?>[] column_class = new Class[cantColumn];
						        
						TableModel model = buildModel(column_name, column_class, cantColumn, rsmd);
						 
						JScrollPane scrTabla = new JScrollPane(buildTable(model, rs, cantColumn, column_name));
						scrTabla.setName("Scroll Tabla");
						scrTabla.setBounds(0, d.height/2+80, d.width, d.height/2-80);
						// se cierran los recursos utilizados 
						rs.close();
						stmt.close(); 
						Component comp = getContentPane().getComponentAt(0, d.height/2+80); 
						if(comp != null)
							getContentPane().remove(comp);
						getContentPane().add(scrTabla, BorderLayout.CENTER);
						getContentPane().revalidate();
						getContentPane().repaint();
					}
					else{ 
						stmt.executeUpdate(comando);
						if((comand.equals("DROP") || comand.equals("drop"))) {
							if(!(specify.equals("user") || specify.equals("USER"))) {
								if((specify.equals("table") || specify.equals("TABLE"))) {
									String deleteTable = "";
									while(tokenized.hasMoreTokens()) {
										deleteTable = tokenized.nextToken();
									}
									deleteTable = deleteTable.replace(";", "");
									for(int i = 0; i < botones.length; i++) {
										if (botones[i].getName().equals(deleteTable)) {
											botones[i].setEnabled(false);
											botones[i].setVisible(false);
											break;
										}
									}
								}
								else {
									for(int i = 0; i < botones.length; i++) {
										botones[i].setEnabled(false);
										botones[i].setVisible(false);
									}
								}
							}
						}
					}
					JOptionPane.showMessageDialog(null, "Se ha ejecutado correctamente el comando!" , "Execución exitosa", JOptionPane.DEFAULT_OPTION);
					
				} catch (SQLException ex) {
					JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR: Error en SQL", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		this.add(execute);
		//Boton Clear
		JButton clear = new JButton("Clear Text");
		clear.setBounds(d.width/2, d.height/2, 100, 80);
		clear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				input.setText("");
			}
		});

		this.add(clear);
		this.repaint();
	}
		
	private JTable buildTable(TableModel model, ResultSet rs, int cantColumn, String[] column_name) {
		try {
			//Tabla
			JTable tabla = new JTable(); // Crea una tabla
			tabla.setModel(model); // setea el modelo de la tabla  
			tabla.setAutoCreateRowSorter(true); // activa el ordenamiento por columnas, para
			tabla.setDefaultRenderer(java.sql.Time.class, new SqlTimeRenderer());
			tabla.setDefaultRenderer(java.sql.Date.class, new SqlTimeRenderer());
			
			int i = 0;
			while (rs.next())
			{
				((DefaultTableModel) tabla.getModel()).setRowCount(i + 1);
				// se agregan a la tabla los datos correspondientes cada celda de la fila recuperada
				for(int j = 0; j < cantColumn; j++) {
					tabla.setValueAt(rs.getObject(column_name[j]), i, j);					
				}
				i++;
			}
			return tabla;
		} 
		catch (SQLException e1) {
			JOptionPane.showMessageDialog(null, e1.getMessage(), "ERROR: Error en SQL", JOptionPane.ERROR_MESSAGE);
			return null;
		}	
	}
	
	
	private TablaVuelosModel buildModel(String[] column_name, Class<?>[] column_class, int cantColum, ResultSetMetaData rsmd) {
		try {
		    for (int i = 0; i < cantColum; i++) {
		    	column_name[i] = rsmd.getColumnName(i+1);
		    	try {
		    		column_class[i] = Class.forName(rsmd.getColumnClassName(i+1));
		    	}
		    	catch(ClassNotFoundException ex) {
		    		JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR: Eror en SQL", JOptionPane.ERROR_MESSAGE);
		    	}
		    }
		    return new TablaVuelosModel(column_class , column_name);
		}
		catch(SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR: Error en SQL", JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

	//Botones clases
	private JScrollPane mostrarBotonesClases() {
		botones = new JButton[table_name.length];	
		
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		int tab = d.width/(table_name.length-1);
		
		

		JList panelBotones= new JList();
		panelBotones.setLayout(null);
		panelBotones.setBounds(0, 0, d.width-250, 250);
		panelBotones.setLayoutOrientation(JList.VERTICAL);

		JScrollPane srcbTablas = new JScrollPane(panelBotones);
		srcbTablas.setLayout(null);
		srcbTablas.setBounds(d.width-250, 0, d.width-250, 250);
		
		int i=0;
		int y=0;
		for(String name : table_name) {
			if(name != null) {
				botones[i]= new JButton(name);
				botones[i].setName(name);
				botones[i].setBounds(0, y, 250, 30);
				botones[i].addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						JButton source = (JButton) e.getSource();
						displayColumns(source.getName());
					}
				});
				panelBotones.add(botones[i]);
				y+=30;
				i++;
			}
		}
		srcbTablas.add(panelBotones);
		getContentPane().add(srcbTablas);
		getContentPane().revalidate();
		getContentPane().repaint();
		
		
		
		
		
		
		/*
		JScrollPane srcb = new JScrollPane();
		srcb.setLayout(null);
		srcb.setBounds(0, 250, d.width, 40);
		for(String name : table_name) {
			if(name != null) {
				botones[i]= new JButton(name);
				botones[i].setName(name);
				botones[i].setBounds(x, 0, tab, 40);
				botones[i].addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						JButton source = (JButton) e.getSource();
						displayColumns(source.getName());
					}
				});
				srcb.add(botones[i]);
				x+=tab;
				i++;
			}
		}
		*/
		return srcbTablas;
	}
	
	private void displayColumns(String table) {
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		Component remove = getContentPane().getComponentAt(0, 290);
		try {
			JScrollPane srcb = new JScrollPane();
			srcb.setLayout(null);
			srcb.setBounds(0, 290, d.width, 40);
			
			Statement stmt = conn.createStatement();
			String sql = "DESCRIBE " + table;
			ResultSet rs = stmt.executeQuery(sql);
			int i = 0;
			JLabel[] labels = new JLabel[20];
			while(rs.next()) {
				String column = rs.getString("Field");
				labels[i] = new JLabel(column, SwingConstants.CENTER);
				i++;
			}
			int tab = d.width/i;
			int x = 0;
			for (int j = 0; j < i; j++) {
				labels[j].setBounds(x, 0, tab, 40);
				srcb.add(labels[j]);
				x += tab;
			}
			rs.close();
			stmt.close();
			if (remove != null)
				getContentPane().remove(remove);
			getContentPane().add(srcb);
			getContentPane().revalidate();
			getContentPane().repaint();
		}
		catch(SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR: Error en SQL", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public final class SqlTimeRenderer extends DefaultTableCellRenderer {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 3711032294462400327L;
		
		private final DateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");
		
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			//aca habia un instace of de value en java.sql.Time
			value = timeFormatter.format(value);
			return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 
		}
		
	}
	
	final class TablaVuelosModel extends DefaultTableModel{
		private static final long serialVersionUID = 5346108049766426615L;
		// define la clase java asociada a cada columna de la tabla
		private Class<?>[] types;
		// define si una columna es editable
		private boolean[] canEdit;
		TablaVuelosModel(Class<?>[] classes, String[] names){
			super(new String[][] {}, names);
			types = classes;
			canEdit= new boolean[names.length];
			for (int i = 0; i < canEdit.length; i++)
				canEdit[i] = false;
		};             	
		
		// recupera la clase java de cada columna de la tabla
		public Class<?> getColumnClass(int columnIndex) 
		{
			return types[columnIndex];
		}
		// determina si una celda es editable
		public boolean isCellEditable(int rowIndex, int columnIndex) 
		{
			return canEdit[columnIndex];
		}         	          	            	
	}
	

}
