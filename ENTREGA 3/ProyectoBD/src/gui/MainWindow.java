package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DatabaseMetaData; //DON'T DELETE Necessary for commented code
import java.sql.ResultSet; //DON'T DELETE Necessary for commented code
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JButton; 
import javax.swing.JComboBox; //DON'T DELETE Necessary for commented code
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

//import com.mysql.cj.jdbc.DatabaseMetaData;

public class MainWindow extends JFrame{
	private JPasswordField password;
	private java.sql.Connection conn= null;
	private JTable tabla;
	private JScrollPane scrTabla;
	@SuppressWarnings("serial")

	
	/**
	 * Autogenerated serialVersionUID by JFrame hierarchy
	 */
	private static final long serialVersionUID = 3565124108220590676L;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainWindow window = new MainWindow();
					window.setLocationRelativeTo(null);
					window.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MainWindow() {
		super();
		initialize();
		
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		this.setBounds(100, 100, 240, 100);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel passPanel = new JPanel();
		passPanel.setLayout(new FlowLayout());
		password = new JPasswordField(20);
		passPanel.add(password);
		password.setVisible(true);
		password.setEditable(true);
		password.setFocusable(true);
		JButton submit = new JButton("Submit");
		submit.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent evt) {
             tryConnect(String.valueOf(password.getPassword()));
          }
        });
		submit.setPreferredSize(new Dimension(80, 30));
		this.getRootPane().setDefaultButton(submit);
		passPanel.add(submit);
		this.add(passPanel);
		passPanel.setBounds(100, 100, 240, 100);
	}

	private void tryConnect(String passw) {
		String server = "localhost:3306";
		String dataBase = "vuelos";
		String user = "admin";
		String pass = passw;
		String url = "jdbc:mysql://" + server + "/" +dataBase+
		"?serverTimezone=America/Argentina/Buenos_Aires";
		try{
			conn = java.sql.DriverManager. getConnection(url, user, pass);
			this.setExtendedState(JFrame.MAXIMIZED_BOTH);
			this.setVisible(true);
			startFields();
		}
		catch (java.sql.SQLException ex){
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Connection Refused", JOptionPane.ERROR_MESSAGE);
			System.out.println("SQLException: " + ex.getMessage());
			System.out.println("SQLState: " + ex.getSQLState());
			System.out.println("VendorError: " + ex.getErrorCode());
		}
	}
	
	private void startFields() {
		this.getContentPane().removeAll();
		this.setLayout(null);
		/* Retrieve table names into an array, create a combo box with it, pretty useless now, might use it later (Not showing combo box on screen for some reason)
		*/try {
			DatabaseMetaData md = conn.getMetaData();
			ResultSet rs = md.getTables(null, null, "%", null);
			md.get
			int i = 0;
			String[] aux = new String[20];
			while (rs.next()) {
				aux[i] = rs.getString(3);
				i++;
			}
			String[] tableNames = new String[i];
			for(int j = 0; j < tableNames.length; j++, i--) {
				tableNames[j] = aux[i];
			}
			
		}
		catch(Exception ex) {}
		
		
		
		
		//Paneles
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		JTextArea input = new JTextArea();
		JScrollPane scrollPane = new JScrollPane(input);
		scrollPane.setBounds(0, 0, d.width, 250);
		this.add(scrollPane);
		       
		
		//------------------------------------------BOTONES--------------------------------------------------------------
		 
		@SuppressWarnings("serial")
		final class TablaVuelosModel extends DefaultTableModel{
        	// define la clase java asociada a cada columna de la tabla
   	        private Class[] types;
     	    // define si una columna es editable
            private boolean[] canEdit;
            TablaVuelosModel(){
            	super(new String[][] {},
            		  new String[]{"Nombre", "Porcentaje"});
            	types = new Class[] {java.lang.String.class,
            	                     java.lang.Integer.class};
            	canEdit= new boolean[] { false, false};
            };             	
        		             
            // recupera la clase java de cada columna de la tabla
            public Class getColumnClass(int columnIndex) 
            {
               return types[columnIndex];
            }
            // determina si una celda es editable
            public boolean isCellEditable(int rowIndex, int columnIndex) 
            {
               return canEdit[columnIndex];
            }         	          	            	
        };
        
        TableModel vuelosModel = 	new TablaVuelosModel();
        scrTabla = new JScrollPane();
        getContentPane().add(scrTabla, BorderLayout.CENTER);
		 //Tabla
         tabla = new JTable(); // Crea una tabla
         scrTabla.setViewportView(tabla);
         tabla.setModel(vuelosModel); // setea el modelo de la tabla  
         tabla.setAutoCreateRowSorter(true); // activa el ordenamiento por columnas, para
         tabla.setBounds(0, d.height/2+80, d.width, d.height/2-80);           
         tabla.setVisible(true);
         this.add(tabla);
		 
		//Boton Execute
		JButton submit = new JButton("Execute Statement");
		submit.setBounds(d.width/2-150, d.height/2, 150, 80);
		submit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				 try {
			         Statement stmt = conn.createStatement();
			         String comando= input.getText();
			         ResultSet rs = stmt.executeQuery(comando);
						int i = 0;
				         while (rs.next())
				         {
				        	 // agrega una fila al modelo de la tabla
				            ((DefaultTableModel) tabla.getModel()).setRowCount(i + 1);
				            // se agregan a la tabla los datos correspondientes cada celda de la fila recuperada
				            tabla.setValueAt(rs.getString("nombre"), i, 0);
				            tabla.setValueAt(rs.getFloat("porcentaje"), i, 1);            
				            i++;
				         }
				         // se cierran los recursos utilizados 
				         rs.close();
				         stmt.close();
				         
					} catch (SQLException e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage(), "ERROR: Error en SQL", JOptionPane.ERROR_MESSAGE);
						System.out.println("SQLException: " + e1.getMessage());
						System.out.println("SQLState: " + e1.getSQLState());
						System.out.println("VendorError: " + e1.getErrorCode());
					}	
			}
		});
		this.add(submit);
		
		//Boton Clear
		JButton clear = new JButton("Clear Text");
		clear.setBounds(d.width/2, d.height/2, 100, 80);
		clear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				input.setText("");
			}
		});
		this.add(clear);
		this.repaint();
	}
}
