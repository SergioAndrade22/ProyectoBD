package gui;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DatabaseMetaData; //DON'T DELETE Necessary for commented code
import java.sql.ResultSet; //DON'T DELETE Necessary for commented code
import javax.swing.JButton; 
import javax.swing.JComboBox; //DON'T DELETE Necessary for commented code
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

//import com.mysql.cj.jdbc.DatabaseMetaData;

public class MainWindow extends JFrame{
	private JPasswordField password;
	private java.sql.Connection conn;
	JTextArea input = new JTextArea();
	
	/**
	 * Autogenerated serialVersionUID by JFrame hierarchy
	 */
	private static final long serialVersionUID = 3565124108220590676L;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainWindow window = new MainWindow();
					window.setLocationRelativeTo(null);
					window.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MainWindow() {
		super();
		initialize();
		
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		this.setBounds(100, 100, 240, 100);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel passPanel = new JPanel();
		passPanel.setLayout(new FlowLayout());
		password = new JPasswordField(20);
		passPanel.add(password);
		password.setVisible(true);
		password.setEditable(true);
		password.setFocusable(true);
		JButton submit = new JButton("Submit");
		submit.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent evt) {
             tryConnect(String.valueOf(password.getPassword()));
          }
        });
		submit.setPreferredSize(new Dimension(80, 30));
		this.getRootPane().setDefaultButton(submit);
		passPanel.add(submit);
		this.add(passPanel);
		passPanel.setBounds(100, 100, 240, 100);
	}

	private void tryConnect(String passw) {
		String server = "localhost:3306";
		String dataBase = "vuelos";
		String user = "admin";
		String pass = passw;
		String url = "jdbc:mysql://" + server + "/" +dataBase+
		"?serverTimezone=America/Argentina/Buenos_Aires";
		try{
			conn = java.sql.DriverManager. getConnection(url, user, pass);
			this.setExtendedState(JFrame.MAXIMIZED_BOTH);
			this.setVisible(true);
			startFields();
		}
		catch (java.sql.SQLException ex){
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Connection Refused", JOptionPane.ERROR_MESSAGE);
			System.out.println("SQLException: " + ex.getMessage());
			System.out.println("SQLState: " + ex.getSQLState());
			System.out.println("VendorError: " + ex.getErrorCode());
		}
	}
	
	private void startFields() {
		this.getContentPane().removeAll();
		this.setLayout(null);
		/* Retrieve table names into an array, create a combo box with it, pretty useless now, might use it later (Not showing combo box on screen for some reason)
		try {
			DatabaseMetaData md = conn.getMetaData();
			ResultSet rs = md.getTables(null, null, "%", null);
			int i = 0;
			String[] aux = new String[20];
			while (rs.next()) {
				aux[i] = rs.getString(3);
				i++;
			}
			String[] tableNames = new String[i];
			for(int j = 0; j < tableNames.length; j++, i--) {
				tableNames[j] = aux[i];
			}
			JComboBox<String> tables = new JComboBox<String>(tableNames);
			tables.setSelectedIndex(0);
			tables.setEditable(true);
			tables.setVisible(true);
			this.add(tables);
		}
		catch(Exception ex) {}
		*/
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		JScrollPane scrollPane = new JScrollPane(input);
		scrollPane.setBounds(0, 0, d.width, 250);
		this.add(scrollPane);
		JButton submit = new JButton("Execute Statement");
		submit.setBounds(d.width/2-150, d.height/2, 150, 80);
		this.add(submit);
		JButton clear = new JButton("Clear Text");
		clear.setBounds(d.width/2, d.height/2, 100, 80);
		clear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clear();
			}
		});
		this.add(clear);
		this.repaint();
	}
	
	private void clear() {
		input.setText("");
	}
}
